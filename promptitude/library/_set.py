from typing import Any, Union, Dict, Optional


def set(name: Union[str, Dict[str, Any]], value: Any = None, hidden: bool = True, _parser_context: Optional[Dict[str, Any]] = None) -> str:
    """
    Set the value of a variable or set of variables.

    Parameters
    ----------
    name : str or dict
        If a string, the name of the variable to set. If a dict, the keys are the variable names and the values to set.
    value : Any, optional
        The value to set the variable to. Only used if `name` is a string.
    hidden : bool, optional
        If `True`, the variable will be set but not printed in the output. Defaults to `True`.
    _parser_context : dict or None, optional
        Internal parser context (used internally). Defaults to `None`.

    Returns
    -------
    str
        The content generated by the set operation, depending on `hidden`.

    Raises
    ------
    ValueError
        If `_parser_context` is `None`, or if 'hidden' is `False` when setting multiple variables.

    Examples
    --------
    Use within a guidance template:

    >>> from promptitude import guidance
    >>> program = guidance("{{set 'output' 234 hidden=False}}{{output}}")
    >>> output = program()
    >>> print(output)
    234234

    >>> program = guidance("{{set 'output' 849203984939}}{{output}}")
    >>> output = program()
    >>> print(output['output'])
    849203984939
    """
    if _parser_context is None:
        raise ValueError("_parser_context cannot be None")

    parser = _parser_context['parser']
    variable_stack = _parser_context['variable_stack']

    if not parser.executing:
        return ""

    if isinstance(name, dict):
        if not hidden:
            raise ValueError("hidden cannot be False when setting multiple variables!")
        for k, v in name.items():
            variable_stack[k] = v
        # Construct output string if necessary
        out = ""
        for k, v in name.items():
            if isinstance(v, str):
                if "\n" in v:
                    v_repr = f'"""{v}"""'
                elif '"' in v:
                    v_repr = f"'{v}'"
                else:
                    v_repr = f'"{v}"'
            else:
                v_repr = str(v)
            out += f" {k}={v_repr}"
        return "{{!--GMARKER_set$" + out.strip() + "$--}}"

    else:
        variable_stack[name] = value
        if not hidden:
            return str(value)
        else:
            out = "{{set " + name + "=" + str(value) + "}}"
            return "{{!--GMARKER_set$" + out + "$--}}"
